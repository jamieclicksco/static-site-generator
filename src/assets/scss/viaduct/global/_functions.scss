// =============================
// Core Percentage Calculation Function
// =============================

//
// Calculate a percentage value using the formula: target / context.
// Parameter Description:
//
// $target  - The value (in pixels) of the elements property you are setting the percentage for.
// $context - The value (in pixels) of the parent elements property.
//
// Example Use:
//
// width: calc-percent(300, 960);
//

@function calc-percent($target, $context) {
  @return ($target / $context) * 100%;
}

// =============================
// Core EM Unit Calculation Function
// =============================

//
// Calculate a EM value using the formula: target / context.
// Your context is the font-size of the parent element.
// If you set the value on a textual element, your context is the element font-size.
//
// Parameter Description:
//
// $target  - The value (in pixels) of the elements property you are setting the EM value for.
// $context - The value (in pixels) of the parent elements property. Defaults to $base-font-size.
//
// Example Use:
//
// margin-right: calc-em(20, 16);
// margin:       calc-em(20 20 10, 16); // Can take multiple values in the first parameter.
//

@function calc-em($values, $context: $base-font-size) {
  $em: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $em: append($em, $value);
    }
    @else {
      $val: $value;
      $em: append($em, ($val / $context * 1em));
    }

  }

  @return $em;
}

// =============================
// Core REM Unit Calculation Function
// =============================

//
// Calculate a REM value using the formula: target / context.
// Your context is the font-size of the root element.
// Note - This is required for rem-sizing mixin.
//
// Parameter Description:
//
// $values  - The value/s (in pixels) of the elements property you are setting the REM value for.
// $context - The value (in pixels) of the root elements font-size. Defaults to $base-font-size.
//
// Example Use:
//
// font-size: calc-rem(20, 16);
// padding:   calc-rem(20 20, 16); // Can take multiple values in the first parameter.
//

@function calc-rem($values, $context: $base-font-size) {
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $rem: append($rem, $value);
    }
    @else {
      $val: $value;
      $rem: append($rem, ($val / $context + rem));
    }

  }

  @return $rem;
}

// =============================
// Core To Pixel Conversion Function
// =============================

//
// Convert a number into a pixel value.
// Note - This is required for converting the base-font-size into
// a pixel value for the <html> element.
//
// Example Use:
//
// to-pixel(16);
//

@function to-pixel($numbers) {
  $px: ();

  @each $number in $numbers {
    $px: append($px, $number + px);
  }

  @return $px;
}

// =============================
// Core Map Count Function
// =============================

//
// Counts the number of items within a given map.
//
// Parameter Description:
//
// $map - A list of values which the function counts upon.
//
// Example Use:
//
// map-count((1, 9, 4))          // returns 3
// map-count((1, 2, 3, 4, 5, 6)) // returns 6
//

@function map-count($map) {
  $count: 0;

  @each $item in $map {
      $count: $count + 1;
  }

  @return $count;
}

// =============================
// Core To Number Function
// =============================

//
// Converts a string into a number.
// Note - Only works from 0-9.
//
// Parameter Description:
//
// $string - A String to be converted into a number.
//
// Example Use:
//
// to-number("3") // returns 3
//

@function to-number($string) {
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9 ;

  $result: 0;

  @for $i from 1 through map-count($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);

    @if not $index {
      @warn "Unknown character `#{$character}`.";
      @return false;
    }

    $number: nth($numbers, $index);
    $result: $result * 10 + $number;
  }

  @return $result;
}

// =============================
// Core To String Function
// =============================

//
// Converts a value into a string.
//
// Parameter Description:
//
// $value - A Value to be converted to a string. Works with anything including lists and maps.
//
// Example Use:
//
// to-string(16px) // returns "16px"
//

@function to-string($value) {
  @return inspect($value);
}
